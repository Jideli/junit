Annotations
	@BeforeClass > executed only once
	@Before > before each test case (if 5 TC, executed 5x)
	@Test > whatever you want to test, code will be defined here
	@After > whatever was initalized in @Before will be released here after each TC
	@AfterClass > objects initalized in @BeforeClass and release once after all TCs
	@Ignore > do not execute this test

Features of JUnit Testing Framework: Fixtures, Test suites, Test runners, JUnit classes
Test Fixtures
Test Suites: @RunWith and @Suite
Test Runners: class which is used to run TCs as a suite

JUnit classes: Assert, TestCase, TestResult, TestSuite
Assert: verify expected and actual output
Assert methods:
	void assertEquals(boolean expected, boolean actual) // can also be string
	void assertFalse(boolean condition) // successful if condition is false
	void assertNotNull(Object object) // OK if value of object is not null
	void asssertNull(Object object) // OK if value is null
	void assertTrue(boolean condition) // OK if condition is true
	void fail() 
	
TestCase methods: (see class TestCaseClass.java)
	int countTestCases() // how many executed
	TestResult createResult() // provide result and write code to create result
	String getName() // get name of executed TC e.g. 'this.getName();' get name of current file
	TestResult run() // if more than 1 TC, how many passed how many failed
	void run(TestResult result) // provide result
	void setName(String name) // rename TC
	void setUp() // initalizing object for test case
	void tearDown() 
	String toString() // print to console or log
	
TestResult methods: (see class TestResultClass.java)
	void addError(Test test, Throwable t) // add errors to bunch of error list
	void addFailure(Test test, AssertionFailedError t) // errors received for assertion methods
	void endTest(Test test)
	int errorCount()
	Enumeration<TestFailure> errors()
	int failureCount()
	int run(TestCase test)
	int runCount()
	void startTest(Test test)
	void stop() // test should be stopped
	

	
	
	
	
	
	
	
	


